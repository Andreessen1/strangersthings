{"ast":null,"code":"var _jsxFileName = \"/Users/david/Day 1/Stranger Things/src/components/SearchBar.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport Posts from './Posts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SearchBar = _ref => {\n  _s();\n\n  let {\n    Posts\n  } = _ref;\n  const [queryString, setQueryString] = useState(\"\");\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    id: \"search\",\n    onSubmit: async event => {\n      event.preventDefault();\n\n      try {\n        const results = await fetchQueryResults({\n          Posts\n        });\n        setSearchResults(results);\n      } catch (error) {\n        console.error();\n      }\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"fieldset\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"keywords\",\n        children: \"Search\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"keywords\",\n        type: \"text\",\n        placeholder: \"enter keywords...\",\n        value: queryString,\n        onChange: event => setQueryString(event.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 6\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      children: \"SEARCH\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 13\n  }, this);\n};\n\n_s(SearchBar, \"7a6nEHcX4iRfI/N4dRSTynxCGP0=\");\n\n_c = SearchBar;\nconst [posts, setPosts] = useState([]);\nconst [searchTerm, setSearchTerm] = useState('');\n\nfunction postMatches(post, text) {// if \n  // return true if any of the fields you want to check against include the text\n  // strings have an .includes() method \n}\n\nconst filteredPosts = posts.filter(post => postMatches(post, searchTerm));\nconst postsToDisplay = searchTerm.length ? filteredPosts : posts;\nexport default SearchBar;\n\nvar _c;\n\n$RefreshReg$(_c, \"SearchBar\");","map":{"version":3,"names":["React","useState","Posts","SearchBar","queryString","setQueryString","event","preventDefault","results","fetchQueryResults","setSearchResults","error","console","target","value","posts","setPosts","searchTerm","setSearchTerm","postMatches","post","text","filteredPosts","filter","postsToDisplay","length"],"sources":["/Users/david/Day 1/Stranger Things/src/components/SearchBar.js"],"sourcesContent":["import React, {useState} from 'react'\nimport Posts from './Posts'\n\nconst SearchBar = ({Posts}) => {\n  \n    const [queryString, setQueryString] = useState(\"\")\n   \n    \n  \n\n  \n    return (<form id=\"search\" onSubmit={async (event) => {\n      event.preventDefault()\n      \n  \n      try {\n        const results = await fetchQueryResults({ Posts })\n        setSearchResults(results)\n      } catch (error) {\n        console.error()\n      } \n    }}>\n     <fieldset>\n      <label htmlFor=\"keywords\">Search</label>\n      <input\n        id=\"keywords\"\n        type=\"text\"\n        placeholder=\"enter keywords...\"\n        value={queryString}\n        onChange={event => setQueryString(event.target.value)} />\n    </fieldset>\n \n    <button>SEARCH</button>\n  </form>\n  )\n}\n\n\nconst [posts, setPosts] = useState([]);\nconst [searchTerm, setSearchTerm] = useState('');\n\nfunction postMatches(post, text) {\n    // if \n  // return true if any of the fields you want to check against include the text\n  // strings have an .includes() method \n}\n\nconst filteredPosts = posts.filter(post => postMatches(post, searchTerm));\nconst postsToDisplay = searchTerm.length ? filteredPosts : posts;\n\n\nexport default SearchBar"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,OAAOC,KAAP,MAAkB,SAAlB;;;AAEA,MAAMC,SAAS,GAAG,QAAa;EAAA;;EAAA,IAAZ;IAACD;EAAD,CAAY;EAE3B,MAAM,CAACE,WAAD,EAAcC,cAAd,IAAgCJ,QAAQ,CAAC,EAAD,CAA9C;EAMA,oBAAQ;IAAM,EAAE,EAAC,QAAT;IAAkB,QAAQ,EAAE,MAAOK,KAAP,IAAiB;MACnDA,KAAK,CAACC,cAAN;;MAGA,IAAI;QACF,MAAMC,OAAO,GAAG,MAAMC,iBAAiB,CAAC;UAAEP;QAAF,CAAD,CAAvC;QACAQ,gBAAgB,CAACF,OAAD,CAAhB;MACD,CAHD,CAGE,OAAOG,KAAP,EAAc;QACdC,OAAO,CAACD,KAAR;MACD;IACF,CAVO;IAAA,wBAWP;MAAA,wBACC;QAAO,OAAO,EAAC,UAAf;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QADD,eAEC;QACE,EAAE,EAAC,UADL;QAEE,IAAI,EAAC,MAFP;QAGE,WAAW,EAAC,mBAHd;QAIE,KAAK,EAAEP,WAJT;QAKE,QAAQ,EAAEE,KAAK,IAAID,cAAc,CAACC,KAAK,CAACO,MAAN,CAAaC,KAAd;MALnC;QAAA;QAAA;QAAA;MAAA,QAFD;IAAA;MAAA;MAAA;MAAA;IAAA,QAXO,eAqBR;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QArBQ;EAAA;IAAA;IAAA;IAAA;EAAA,QAAR;AAwBH,CAhCD;;GAAMX,S;;KAAAA,S;AAmCN,MAAM,CAACY,KAAD,EAAQC,QAAR,IAAoBf,QAAQ,CAAC,EAAD,CAAlC;AACA,MAAM,CAACgB,UAAD,EAAaC,aAAb,IAA8BjB,QAAQ,CAAC,EAAD,CAA5C;;AAEA,SAASkB,WAAT,CAAqBC,IAArB,EAA2BC,IAA3B,EAAiC,CAC7B;EACF;EACA;AACD;;AAED,MAAMC,aAAa,GAAGP,KAAK,CAACQ,MAAN,CAAaH,IAAI,IAAID,WAAW,CAACC,IAAD,EAAOH,UAAP,CAAhC,CAAtB;AACA,MAAMO,cAAc,GAAGP,UAAU,CAACQ,MAAX,GAAoBH,aAApB,GAAoCP,KAA3D;AAGA,eAAeZ,SAAf"},"metadata":{},"sourceType":"module"}